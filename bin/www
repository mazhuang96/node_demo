#!/usr/bin/env node

/**
 * Module dependencies.
 */

const http = require('http');
const config = require('../node_modules/config');

const log4js = require('../lib/log/log');
const logger = log4js.getLogger('demo');
const consoleLog = log4js.getLogger('console');
logger.info('-------Server start!!--------');

const mongoose = require('../lib/db/mongodb');
const client = require('../lib/redis/redisclient');
const app = require('../app');
/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || config.get('http.port'));
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);
const db = mongoose.connection;


// 连接成功
client.once('ready', () => {
  logger.info('redis ready');
}).on("error", (err) => {
  consoleLog.error("Server end!! Redis error: ", err);
  process.exit(-1);
});
db.on('open', () => {
  logger.info('MongoDB Connection Successed');
}).on('error', (err) => {
  consoleLog.error('Server end!! MongoDB Connection Error: ' + err);
  process.exit(-1);
});

// Listen on provided port, on all network interfaces.
server.listen(port).on('error', onError).on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      consoleLog.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      consoleLog.error('start error:', bind + ' is already in use!');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  consoleLog.info('Listening on ' + bind, `. Server is running at http://localhost:${port}/`);
}